I am providing you a properties_NL_grammar_APB.json file. The file contains a set of properties that were generated using a template, from the waveforms in the text. I am now providing you a textual description of what the behavior should be. Please extract the properties that best describe the relationships described in the textual description and return them in a json file. The properties must come from the json file. Do not include properties that are not directly mentioned in the text. Do not make assumptions from the text.

Please focus on the signals that exist in properties_NL_grammar_APB.json
Here is the textual description:
3.1 Write transfers
Write transfers
This section describes the following types of write transfer:
• With no wait states
• With wait states
All signals shown in this section are sampled at the rising edge of PCLK. 

3.1.1 With no wait states
Figure 3-1 shows a basic write transfer with no wait states.

The Setup phase of the write transfer occurs at T1 in Figure 3-1. The select signal, PSEL, is asserted, which means that PADDR, PWRITE and PWDATA must be valid.
The Access phase of the write transfer is shown at T2 in Figure 3-1 where PENABLE is asserted. PREADY is asserted by the Completer at the rising edge of PCLK to indicate that the write data will be accepted at T3. PADDR, PWDATA, and any other control signals, must be stable until the transfer completes.
At the end of the transfer, PENABLE is deasserted. PSEL is also deasserted, unless there is another transfer to the same peripheral.

3.1.2 With wait states
Figure 3-2 shows how the Completer can use PREADY to extend the transfer.
During an Access phase, when PENABLE is HIGH, the Completer extends the transfer by driving PREADY LOW. The following signals remain unchanged while PREADY remains LOW:
• Address signal, PADDR
• Direction signal, PWRITE
• Select signal, PSELx
• Enable signal, PENABLE
• Write data signal, PWDATA
• Write strobe signal, PSTRB
• Protection type signal, PPROT
• User request attribute, PAUSER
• User write data attribute, PWUSER
PREADY can take any value when PENABLE is LOW. This ensures that peripherals that have a fixed two cycle access can tie PREADY HIGH.

3.2
Write strobes
PSTRB enables sparse data transfer on the write data bus. Each PSTRB corresponds to 1 byte of the write data bus. When asserted HIGH, PSTRB indicates that the corresponding byte lane of the write data bus contains valid information.
There is one write strobe for each 8 bits of the write data bus, so PSTRB[n] corresponds to PWDATA[(8n + 7):(8n)].
Figure 3-3 shows this relationship on a 32-bit data bus.
For read transfers, the Requester must drive all bits of PSTRB LOW.

3.2.1 PSTRB presence and compatibility
PSTRB is an optional signal. An APB peripheral might support a limited set of access types, which must be documented for the programmer. This means that all combinations of PSTRB presence might be compatible, if this document states that sparse writes are not supported.

The compatibility of PSTRB when connecting Requesters and Completers is described in Table 3-1.

3.3 Read transfers
Two types of read transfer are described in this section:
• With no wait states
• With wait states
All signals shown in this section are sampled at the rising edge of PCLK.

3.3.1 With no wait states
Figure 3-4 shows a read transfer.
The timing of the address, PADDR, write, PWRITE, select, PSEL, and enable, PENABLE, signals are the same as described in Write transfers on page 3-20. The Completer must provide the data before the end of the read transfer.

3.3.2 With wait states
Figure 3-5 shows how the PREADY signal can extend the transfer.
The transfer is extended if PREADY is driven LOW during an Access phase. The following signals remain unchanged while PREADY remains LOW:
• Address signal, PADDR
• Direction signal, PWRITE
• Select signal, PSEL
• Enable signal, PENABLE
• Protection signal, PPROT
• User signal, PAUSER
Figure 3-5 on page 3-23 shows that two cycles are added using PREADY. However, any number of additional cycles can be added, from zero upwards.

3.4 Error response
PSLVERR can be used to indicate an error condition on an APB transfer. Error conditions can occur on both read and write transactions.
PSLVERR is only considered valid during the last cycle of an APB transfer, when PSEL, PENABLE, and PREADY are all HIGH.
It is recommended, but not required, that PSLVERR is driven LOW when PSEL, PENABLE, or PREADY are LOW.
Transactions that receive an error might or might not have changed the state of the peripheral. This is peripheral-specific and either state is acceptable.
When a write transaction receives an error, this does not mean that the register within the peripheral has not been updated.
Read transactions that receive an error can return invalid data. There is no requirement for the peripheral to drive the data bus to all 0s for a read error. A Requester which receives an error response to a read transfer might still use the data. A Completer cannot rely on the error response to prevent the reading of a value on PRDATA.
Completers are not required to support PSLVERR. Where a Completer does not include PSLVERR, the appropriate input to the Requester is tied LOW.
